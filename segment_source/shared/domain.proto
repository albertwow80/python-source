syntax = "proto3";

package domain;

service Source {
    // API Proxy
    rpc Set (SetRequest) returns (StatusResponse) {}
    rpc Track (TrackRequest) returns (StatusResponse) {}
    rpc Identify (IdentifyRequest) returns (StatusResponse) {}
    rpc Group (GroupRequest) returns (StatusResponse) {}

    // Context
    rpc GetContext (Empty) returns (GetContextResponse) {}
    rpc StoreContext (StoreContextRequest) returns (StoreContextResponse) {}

    // Reports
    rpc ReportError (ReportErrorRequest) returns (StatusResponse) {}
    rpc ReportWarning (ReportWarningRequest) returns (StatusResponse) {}

    // Stats
    rpc StatsIncrement (StatsRequest) returns (StatusResponse) {}
    rpc StatsHistogram (StatsRequest) returns (StatusResponse) {}
    rpc StatsGauge (StatsRequest) returns (StatusResponse) {}

    // Misc.
    rpc KeepAlive (Empty) returns (StatusResponse) {}
}


//
// API Proxy
//

// Track
message TrackRequest {
    bytes context = 1;
    bytes integrations = 2;
    bytes properties = 3;
    string anonymousId = 4;
    string userId = 5;
    string event = 6;
}

// Identify
message IdentifyRequest {
    bytes context = 1;
    bytes integrations = 2;
    bytes traits = 3;
    string anonymousId = 4;
    string userId = 5;
}

// Group
message GroupRequest {
    bytes context = 1;
    bytes integrations = 2;
    bytes traits = 3;
    string anonymousId = 4;
    string userId = 5;
    string groupId = 6;
}

// Set
message SetRequest {
    string collection = 1;
    string id = 2;
    bytes properties = 3;
}


//
// Context
//

// GetContext
message GetContextResponse {
    string path = 1;
}

// StoreContext
message StoreContextRequest {
    bytes payload = 1;
}

message StoreContextResponse {
    string path = 1;
}


//
// Reports
//

// ReportError
message ReportErrorRequest {
    string collection = 1;
    string message = 3;
}

// ReportWarning
message ReportWarningRequest {
    string collection = 1;
    string message = 3;
}


//
// Stats
//

// StatsIncrement, StatsHistogram, StatsGauge
message StatsRequest {
    string name = 1;
    int64 value = 2;
    repeated string tags = 3;
}


//
// Misc.
//

message StatusResponse {
    bool success = 1;
}

message Empty {}
